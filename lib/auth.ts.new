// lib/auth.ts
import admin from "@/lib/firebase-admin";

export async function verifyAuthHeader(req: Request): Promise<string> {
  try {
    const authHeader = req.headers.get("authorization");
    console.log("Auth header:", authHeader ? "Present" : "Missing");

    if (!authHeader) {
      console.error("Authorization header is missing");
      throw new Error("MISSING_AUTH_HEADER");
    }

    if (!authHeader.startsWith("Bearer ")) {
      console.error("Auth header does not start with Bearer");
      throw new Error("MISSING_AUTH_HEADER");
    }

    const idToken = authHeader.split("Bearer ")[1];

    if (!idToken) {
      console.error("ID token is missing after Bearer prefix");
      throw new Error("MISSING_AUTH_HEADER");
    }

    console.log("ID Token length:", idToken.length);

    try {
      const decoded = await admin.auth().verifyIdToken(idToken);
      console.log("Token verified successfully for UID:", decoded.uid);
      return decoded.uid; // Firebase UID
    } catch (tokenError) {
      console.error("Error verifying ID token:", tokenError);
      throw new Error("INVALID_AUTH_TOKEN");
    }
  } catch (error) {
    // Re-throw our custom errors, but wrap unexpected errors
    if (error instanceof Error && 
        (error.message === "MISSING_AUTH_HEADER" || 
         error.message === "INVALID_AUTH_TOKEN")) {
      throw error;
    }

    console.error("Unexpected error in verifyAuthHeader:", error);
    throw new Error("AUTH_ERROR");
  }
}